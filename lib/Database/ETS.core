module 'ETS' ['info'/1,
	      'module_info'/0,
	      'module_info'/1,
	      'new'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[69|[84|[83|[46|[101|[114|[108]]]]]]],1}],
		%% Line 19
		'spec' =
		    %% Line 19
		    [{{'new',2},[{'type',19,'fun',[{'type',19,'product',[{'type',19,'string',[]}|[{'type',19,'map','any'}]]}|[{'remote_type',19,[{'atom',19,'ets'}|[{'atom',19,'tab'}|[[]]]]}]]}]}],
		%% Line 23
		'spec' =
		    %% Line 23
		    [{{'info',1},[{'type',23,'fun',[{'type',23,'product',[{'remote_type',23,[{'atom',23,'ets'}|[{'atom',23,'tab'}|[[]]]]}]}|[{'type',23,'union',[{'type',23,'tuple',[{'atom',23,'Nothing'}]}|[{'type',23,'tuple',[{'atom',23,'Just'}|[{'type',23,'map','any'}]]}]]}]]}]}]]
'new'/2 =
    %% Line 20
    fun (_0,_1) ->
	let <_3> =
	    call %% Line 21
		 'erlang':%% Line 21
			  'list_to_atom'
		(_0)
	in  let <_2> =
		apply %% Line 21
		      'parseOpts'/1
		    (_1)
	    in  %% Line 21
		call 'ets':'new'
		    (_3, _2)
'info'/1 =
    %% Line 24
    fun (_0) ->
	%% Line 25
	case call 'ets':'info'
		 (_0) of
	  %% Line 26
	  <'undefined'> when 'true' ->
	      {'Nothing'}
	  %% Line 27
	  <Info> when 'true' ->
	      let <_1> =
		  apply 'info2Map'/2
		      (Info, ~{}~)
	      in  {'Just',_1}
	end
'parseOpts'/1 =
    %% Line 30
    fun (_0) ->
	case _0 of
	  <~{%% Line 35
	    'compressed':=Compressed,%% Line 32
				     'keyPos':=KeyPos,%% Line 31
						      'access':=Access,%% Line 34
								       'writeConcurrency':=W,%% Line 33
											     'readConcurrency':=R,'ttype':=Type}~> when 'true' ->
	      let <_1> =
		  apply %% Line 37
			'ttype'/1
		      (%% Line 37
		       Type)
	      in  let <_2> =
		      apply %% Line 38
			    'access'/1
			  (%% Line 38
			   Access)
		  in  let <Opts> =
			  [_1|%% Line 38
			      [_2|%% Line 39
				  ['named_table'|%% Line 40
						 [{'keypos',KeyPos}|%% Line 41
								    [{'read_concurrency',R}|%% Line 42
											    [{'write_concurrency',W}|%% Line 43
														     []]]]]]]
		      in  %% Line 44
			  case Compressed of
			    %% Line 45
			    <'true'> when 'true' ->
				['compressed'|Opts]
			    %% Line 46
			    <'false'> when 'true' ->
				Opts
			    ( <_4> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_4})
			      -| ['compiler_generated'] )
			  end
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'parseOpts',1}}] )
	    -| ['compiler_generated'] )
	end
'info2Map'/2 =
    %% Line 49
    fun (_0,_1) ->
	case <_0,_1> of
	  <[{'id',Id}|Info],M> when 'true' ->
	      let <_2> =
		  call %% Line 50
		       'maps':%% Line 50
			      'put'
		      (%% Line 50
		       'id', %% Line 50
			     Id, %% Line 50
				 M)
	      in  %% Line 50
		  apply 'info2Map'/2
		      (Info, _2)
	  %% Line 51
	  <[{'read_concurrency',R}|Info],M> when 'true' ->
	      let <_3> =
		  call %% Line 52
		       'maps':%% Line 52
			      'put'
		      (%% Line 52
		       'readConcurrency', %% Line 52
					  R, %% Line 52
					     M)
	      in  %% Line 52
		  apply 'info2Map'/2
		      (Info, _3)
	  %% Line 53
	  <[{'write_concurrency',W}|Info],M> when 'true' ->
	      let <_4> =
		  call %% Line 54
		       'maps':%% Line 54
			      'put'
		      (%% Line 54
		       'writeConcurrency', %% Line 54
					   W, %% Line 54
					      M)
	      in  %% Line 54
		  apply 'info2Map'/2
		      (Info, _4)
	  %% Line 55
	  <[{'compressed',C}|Info],M> when 'true' ->
	      let <_5> =
		  call %% Line 56
		       'maps':%% Line 56
			      'put'
		      (%% Line 56
		       'compressed', %% Line 56
				     C, %% Line 56
					M)
	      in  %% Line 56
		  apply 'info2Map'/2
		      (Info, _5)
	  %% Line 57
	  <[{'memory',Size}|Info],M> when 'true' ->
	      let <_6> =
		  call %% Line 58
		       'maps':%% Line 58
			      'put'
		      (%% Line 58
		       'memory', %% Line 58
				 Size, %% Line 58
				       M)
	      in  %% Line 58
		  apply 'info2Map'/2
		      (Info, _6)
	  %% Line 59
	  <[{'owner',Pid}|Info],M> when 'true' ->
	      let <_7> =
		  call %% Line 60
		       'maps':%% Line 60
			      'put'
		      (%% Line 60
		       'owner', %% Line 60
				Pid, %% Line 60
				     M)
	      in  %% Line 60
		  apply 'info2Map'/2
		      (Info, _7)
	  %% Line 61
	  <[{'name',Name}|Info],M> when 'true' ->
	      let <_8> =
		  call %% Line 62
		       'maps':%% Line 62
			      'put'
		      (%% Line 62
		       'name', %% Line 62
			       Name, %% Line 62
				     M)
	      in  %% Line 62
		  apply 'info2Map'/2
		      (Info, _8)
	  %% Line 63
	  <[{'size',Size}|Info],M> when 'true' ->
	      let <_9> =
		  call %% Line 64
		       'maps':%% Line 64
			      'put'
		      (%% Line 64
		       'size', %% Line 64
			       Size, %% Line 64
				     M)
	      in  %% Line 64
		  apply 'info2Map'/2
		      (Info, _9)
	  %% Line 65
	  <[{'node',Node}|Info],M> when 'true' ->
	      let <_10> =
		  call %% Line 66
		       'maps':%% Line 66
			      'put'
		      (%% Line 66
		       'node', %% Line 66
			       Node, %% Line 66
				     M)
	      in  %% Line 66
		  apply 'info2Map'/2
		      (Info, _10)
	  %% Line 67
	  <[{'named_table',Bool}|Info],M> when 'true' ->
	      let <_11> =
		  call %% Line 68
		       'maps':%% Line 68
			      'put'
		      (%% Line 68
		       'namedTable', %% Line 68
				     Bool, %% Line 68
					   M)
	      in  %% Line 68
		  apply 'info2Map'/2
		      (Info, _11)
	  %% Line 69
	  <[{'type',Type}|Info],M> when 'true' ->
	      let <_12> =
		  apply %% Line 70
			'ttype'/1
		      (%% Line 70
		       Type)
	      in  let <_13> =
		      call %% Line 70
			   'maps':%% Line 70
				  'put'
			  (%% Line 70
			   'ttype', _12, %% Line 70
					 M)
		  in  %% Line 70
		      apply 'info2Map'/2
			  (Info, _13)
	  %% Line 71
	  <[{'keypos',Pos}|Info],M> when 'true' ->
	      let <_14> =
		  call %% Line 72
		       'maps':%% Line 72
			      'put'
		      (%% Line 72
		       'keyPos', %% Line 72
				 Pos, %% Line 72
				      M)
	      in  %% Line 72
		  apply 'info2Map'/2
		      (Info, _14)
	  %% Line 73
	  <[{'protection',Access}|Info],M> when 'true' ->
	      let <_15> =
		  apply %% Line 74
			'access'/1
		      (%% Line 74
		       Access)
	      in  let <_16> =
		      call %% Line 74
			   'maps':%% Line 74
				  'put'
			  (%% Line 74
			   'protection', _15, %% Line 74
					      M)
		  in  %% Line 74
		      apply 'info2Map'/2
			  (Info, _16)
	  %% Line 75
	  <[_19|Info],M> when 'true' ->
	      %% Line 76
	      apply 'info2Map'/2
		  (Info, M)
	  %% Line 77
	  <[],M> when 'true' ->
	      M
	  ( <_18,_17> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17})
		  -| [{'function_name',{'info2Map',2}}] )
	    -| ['compiler_generated'] )
	end
'access'/1 =
    %% Line 84
    fun (_0) ->
	case _0 of
	  <{'Public'}> when 'true' ->
	      'public'
	  %% Line 85
	  <{'Protected'}> when 'true' ->
	      'protected'
	  %% Line 86
	  <{'Private'}> when 'true' ->
	      'private'
	  %% Line 88
	  <'public'> when 'true' ->
	      {'Public'}
	  %% Line 89
	  <'protected'> when 'true' ->
	      {'Protected'}
	  %% Line 90
	  <'private'> when 'true' ->
	      {'Private'}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'access',1}}] )
	    -| ['compiler_generated'] )
	end
'ttype'/1 =
    %% Line 93
    fun (_0) ->
	case _0 of
	  <{'Set'}> when 'true' ->
	      'set'
	  %% Line 94
	  <{'OrderedSet'}> when 'true' ->
	      'ordered_set'
	  %% Line 95
	  <{'Bag'}> when 'true' ->
	      'bag'
	  %% Line 96
	  <{'DuplicateBag'}> when 'true' ->
	      'duplicate_bag'
	  %% Line 98
	  <'set'> when 'true' ->
	      {'Set'}
	  %% Line 99
	  <'ordered_set'> when 'true' ->
	      {'OrderedSet'}
	  %% Line 100
	  <'bag'> when 'true' ->
	      {'Bag'}
	  %% Line 101
	  <'duplicate_bag'> when 'true' ->
	      {'DuplicateBag'}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'ttype',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('ETS')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('ETS', _0)
end