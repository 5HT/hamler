module 'Applicative' ['applyListImpl'/2,
		      'module_info'/0,
		      'module_info'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[65|[112|[112|[108|[105|[99|[97|[116|[105|[118|[101|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 19
		'type' =
		    %% Line 19
		    [{'mapFun',{'type',19,'fun',[{'type',19,'product',[{'ann_type',19,[{'var',19,'A'}|[{'type',19,'any',[]}]]}]}|[{'ann_type',19,[{'var',19,'B'}|[{'type',19,'any',[]}]]}]]},[]}],
		%% Line 21
		'spec' =
		    %% Line 21
		    [{{'applyListImpl',2},[{'type',21,'fun',[{'type',21,'product',[{'type',21,'list',[{'user_type',21,'mapFun',[]}]}|[{'type',21,'list',[{'type',21,'any',[]}]}]]}|[{'type',21,'list',[{'type',21,'any',[]}]}]]}]}]]
'applyListImpl'/2 =
    %% Line 22
    fun (_0,_1) ->
	%% Line 23
	( letrec
	      'lc$^0'/1 =
		  fun (_6) ->
		      case _6 of
			<[X|_3]> when 'true' ->
			    ( letrec
				  'lc$^1'/1 =
				      fun (_7) ->
					  case _7 of
					    <[F|_5]> when 'true' ->
						let <_8> =
						    apply F
							(X)
						in  let <_9> =
							apply 'lc$^1'/1
							    (_5)
						    in  ( [_8|_9]
							  -| ['compiler_generated'] )
					    <[]> when 'true' ->
						apply 'lc$^0'/1
						    (_3)
					    ( <_12> when 'true' ->
						  ( primop 'match_fail'
							({'function_clause',_12})
						    -| [{'function_name',{'lc$^1',1}}] )
					      -| ['compiler_generated'] )
					  end
			      in  apply 'lc$^1'/1
				      (_0)
			      -| ['list_comprehension'] )
			<[]> when 'true' ->
			    []
			( <_13> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_13})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_1)
	  -| ['list_comprehension'] )
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Applicative')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Applicative', _0)
end