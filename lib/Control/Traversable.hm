module Control.Traversable where

import Data.Semigroup  (class Monoid, mempty, (<>))
import Control.Monad (class Applicative, class Functor, apply, map, pure)
import Data.Function (identity)

instance Traversable List where
  traverse = traverseArrayImpl apply map pure
  sequence = sequenceDefault

foreign import traverseArrayImpl
  :: forall m a b
   . (m (a -> b) -> m a -> m b)
  -> ((a -> b) -> m a -> m b)
  -> (a -> m a)
  -> (a -> m b)
  -> [a]
  -> m ([b])

-- | for [1, 2, 3] \n -> do
-- |   print n
-- |   pure (n * n)
for
  :: forall a b m t
   . Applicative m
  => Traversable t
  => t a
  -> (a -> m b)
  -> m (t b)
for x f = traverse f x

traverseDefault
  :: forall t a b m
   . Traversable t
  => Applicative m
  => (a -> m b)
  -> t a
  -> m (t b)
traverseDefault f ta = sequence (map f ta)

sequenceDefault
  :: forall t a m
   . Traversable t
  => Applicative m
  => t (m a)
  -> m (t a)
sequenceDefault = traverse identity

