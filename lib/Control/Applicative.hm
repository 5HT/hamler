-----------------------------------------------------------------------------
-- |
-- Module      :  Control.Applicative
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Applicative typeclasss.
--
-----------------------------------------------------------------------------
module Control.Applicative
  ( class Applicative, pure, apply
  , liftA1, liftA2, liftA3, liftA4
  , module Data.Functor
  ) where

import Data.Functor (class Functor, (<$>))

class Functor f => Applicative f where
  pure  :: forall a. a -> f a
  apply :: forall a b. f (a -> b) -> f a -> f b

infixl 4 apply as <*>

instance Applicative List where
  pure x = [x]
  apply = applyListImpl

foreign import applyListImpl :: forall a b. List (a -> b) -> List a -> List b

-----------------------------------------------------------------------------
-- | Lift a function.

liftA1 :: forall a b f. Applicative f => (a -> b) -> f a -> f b
liftA1 f a = pure f <*> a

liftA2 :: forall a b c f. Applicative f => (a -> b -> c) -> f a -> f b -> f c
liftA2 f a b = f <$> a <*> b

liftA3 :: forall a b c d f. Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d
liftA3 f a b c = f <$> a <*> b <*> c

liftA4 :: forall a b c d e f. Applicative f => (a -> b -> c -> d -> e) -> f a -> f b -> f c -> f d -> f e
liftA4 f a b c d = f <$> a <*> b <*> c <*> d
