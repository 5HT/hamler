module 'Monad' ['bindImpl'/2,
		'bindListImpl'/2,
		'module_info'/0,
		'module_info'/1,
		'pureImpl'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[77|[111|[110|[97|[100|[46|[101|[114|[108]]]]]]]]],1}],
		%% Line 22
		'spec' =
		    %% Line 22
		    [{{'bindImpl',2},[{'type',22,'fun',[{'type',22,'product',[{'type',22,'any',[]}|[{'type',22,'fun',[{'type',22,'product',[{'ann_type',22,[{'var',22,'A'}|[{'type',22,'term',[]}]]}]}|[{'ann_type',22,[{'var',22,'B'}|[{'type',22,'term',[]}]]}]]}]]}|[{'type',22,'any',[]}]]}]}],
		%% Line 25
		'spec' =
		    %% Line 25
		    [{{'bindListImpl',2},[{'type',25,'fun',[{'type',25,'product',[{'type',25,'list',[{'type',25,'term',[]}]}|[{'type',25,'fun',[{'type',25,'product',[{'type',25,'term',[]}]}|[{'type',25,'list',[{'type',25,'term',[]}]}]]}]]}|[{'type',25,'list',[{'type',25,'term',[]}]}]]}]}],
		%% Line 29
		'spec' =
		    %% Line 29
		    [{{'pureImpl',1},[{'type',29,'fun',[{'type',29,'product',[{'type',29,'any',[]}]}|[{'type',29,'any',[]}]]}]}]]
'bindImpl'/2 =
    %% Line 23
    fun (_0,_1) ->
	apply _1
	    (_0)
'bindListImpl'/2 =
    %% Line 26
    fun (_0,_1) ->
	let <_2> =
	    call %% Line 27
		 'lists':%% Line 27
			 'map'
		(_1, _0)
	in  %% Line 27
	    call 'lists':'flatten'
		(_2)
'pureImpl'/1 =
    %% Line 30
    fun (_0) ->
	_0
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Monad')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Monad', _0)
end