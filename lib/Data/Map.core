module 'Map' ['isEmpty'/1,
	      'lookup'/2,
	      'module_info'/0,
	      'module_info'/1,
	      'notMember'/2,
	      'singleton'/2,
	      'take'/2]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[77|[97|[112|[46|[101|[114|[108]]]]]]],1}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[77|[97|[121|[98|[101|[46|[104|[114|[108]]]]]]]]],1}],
		%% Line 2
		'type' =
		    %% Line 2
		    [{'maybe',{'type',2,'union',[{'type',2,'tuple',[{'atom',2,'Nothing'}]}|[{'type',2,'tuple',[{'atom',2,'Just'}|[{'var',2,'A'}]]}]]},[{'var',2,'A'}]}],
		%% Line 18
		'file' =
		    %% Line 18
		    [{[77|[97|[112|[46|[101|[114|[108]]]]]]],18}],
		%% Line 30
		'spec' =
		    %% Line 30
		    [{{'isEmpty',1},[{'type',30,'fun',[{'type',30,'product',[{'type',30,'map','any'}]}|[{'type',30,'boolean',[]}]]}]}],
		%% Line 34
		'spec' =
		    %% Line 34
		    [{{'lookup',2},[{'type',34,'fun',[{'type',34,'product',[{'ann_type',34,[{'var',34,'Key'}|[{'type',34,'term',[]}]]}|[{'type',34,'map','any'}]]}|[{'user_type',34,'maybe',[{'ann_type',34,[{'var',34,'Value'}|[{'type',34,'term',[]}]]}]}]]}]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'notMember',2},[{'type',41,'fun',[{'type',41,'product',[{'ann_type',41,[{'var',41,'Key'}|[{'type',41,'term',[]}]]}|[{'type',41,'map','any'}]]}|[{'type',41,'boolean',[]}]]}]}],
		%% Line 44
		'spec' =
		    %% Line 44
		    [{{'take',2},[{'type',44,'fun',[{'type',44,'product',[{'ann_type',44,[{'var',44,'Key'}|[{'type',44,'term',[]}]]}|[{'type',44,'map','any'}]]}|[{'user_type',44,'maybe',[{'type',44,'tuple',[{'ann_type',44,[{'var',44,'Value'}|[{'type',44,'term',[]}]]}|[{'type',44,'map','any'}]]}]}]]}]}]]
'singleton'/2 =
    %% Line 27
    fun (_0,_1) ->
	~{_0=>_1}~
'isEmpty'/1 =
    %% Line 31
    fun (_0) ->
	let <_1> =
	    call 'maps':'size'
		(_0)
	in  call 'erlang':'=='
		(_1, 0)
'lookup'/2 =
    %% Line 35
    fun (_0,_1) ->
	%% Line 36
	case call 'maps':'find'
		 (_0, _1) of
	  %% Line 37
	  <{'ok',Value}> when 'true' ->
	      {'Just',Value}
	  %% Line 38
	  <'error'> when 'true' ->
	      'Nothing'
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'notMember'/2 =
    %% Line 42
    fun (_0,_1) ->
	let <_2> =
	    call 'maps':'is_key'
		(_0, _1)
	in  call 'erlang':'not'
		(_2)
'take'/2 =
    %% Line 45
    fun (_0,_1) ->
	%% Line 46
	case call 'maps':'take'
		 (_0, _1) of
	  %% Line 47
	  <_@r0 = {Value,Map2}> when 'true' ->
	      {'Just',_@r0}
	  %% Line 48
	  <'error'> when 'true' ->
	      'Nothing'
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_2})
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Map')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Map', _0)
end