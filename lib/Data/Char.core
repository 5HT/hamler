module 'Char' ['chr'/1,
	       'digitToInt'/1,
	       'intToDigit'/1,
	       'isAlpha'/1,
	       'isAlphaNum'/1,
	       'isAscii'/1,
	       'isControl'/1,
	       'isDigit'/1,
	       'isHexDigit'/1,
	       'isLower'/1,
	       'isOctDigit'/1,
	       'isPrint'/1,
	       'isSpace'/1,
	       'isUpper'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'ord'/1,
	       'toLower'/1,
	       'toTitle'/1,
	       'toUpper'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[67|[104|[97|[114|[46|[101|[114|[108]]]]]]]],1}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'isControl',1},[{'type',47,'fun',[{'type',47,'product',[{'type',47,'char',[]}]}|[{'type',47,'boolean',[]}]]}]}],
		%% Line 59
		'spec' =
		    %% Line 59
		    [{{'isSpace',1},[{'type',59,'fun',[{'type',59,'product',[{'type',59,'char',[]}]}|[{'type',59,'boolean',[]}]]}]}],
		%% Line 68
		'spec' =
		    %% Line 68
		    [{{'isLower',1},[{'type',68,'fun',[{'type',68,'product',[{'type',68,'char',[]}]}|[{'type',68,'boolean',[]}]]}]}],
		%% Line 73
		'spec' =
		    %% Line 73
		    [{{'isUpper',1},[{'type',73,'fun',[{'type',73,'product',[{'type',73,'char',[]}]}|[{'type',73,'boolean',[]}]]}]}],
		%% Line 78
		'spec' =
		    %% Line 78
		    [{{'isAlpha',1},[{'type',78,'fun',[{'type',78,'product',[{'type',78,'char',[]}]}|[{'type',78,'boolean',[]}]]}]}],
		%% Line 82
		'spec' =
		    %% Line 82
		    [{{'isAlphaNum',1},[{'type',82,'fun',[{'type',82,'product',[{'type',82,'char',[]}]}|[{'type',82,'boolean',[]}]]}]}],
		%% Line 86
		'spec' =
		    %% Line 86
		    [{{'isPrint',1},[{'type',86,'fun',[{'type',86,'product',[{'type',86,'char',[]}]}|[{'type',86,'boolean',[]}]]}]}],
		%% Line 89
		'spec' =
		    %% Line 89
		    [{{'isDigit',1},[{'type',89,'fun',[{'type',89,'product',[{'type',89,'char',[]}]}|[{'type',89,'boolean',[]}]]}]}],
		%% Line 94
		'spec' =
		    %% Line 94
		    [{{'isOctDigit',1},[{'type',94,'fun',[{'type',94,'product',[{'type',94,'char',[]}]}|[{'type',94,'boolean',[]}]]}]}],
		%% Line 99
		'spec' =
		    %% Line 99
		    [{{'isHexDigit',1},[{'type',99,'fun',[{'type',99,'product',[{'type',99,'char',[]}]}|[{'type',99,'boolean',[]}]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'isAscii',1},[{'type',106,'fun',[{'type',106,'product',[{'type',106,'char',[]}]}|[{'type',106,'boolean',[]}]]}]}],
		%% Line 111
		'spec' =
		    %% Line 111
		    [{{'toUpper',1},[{'type',111,'fun',[{'type',111,'product',[{'type',111,'char',[]}]}|[{'type',111,'char',[]}]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'toLower',1},[{'type',116,'fun',[{'type',116,'product',[{'type',116,'char',[]}]}|[{'type',116,'char',[]}]]}]}],
		%% Line 121
		'spec' =
		    %% Line 121
		    [{{'digitToInt',1},[{'type',121,'fun',[{'type',121,'product',[{'type',121,'char',[]}]}|[{'type',121,'integer',[]}]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'intToDigit',1},[{'type',130,'fun',[{'type',130,'product',[{'type',130,'integer',[]}]}|[{'type',130,'char',[]}]]}]}],
		%% Line 139
		'spec' =
		    %% Line 139
		    [{{'toTitle',1},[{'type',139,'fun',[{'type',139,'product',[{'type',139,'char',[]}]}|[{'type',139,'char',[]}]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'ord',1},[{'type',142,'fun',[{'type',142,'product',[{'type',142,'char',[]}]}|[{'type',142,'integer',[]}]]}]}],
		%% Line 145
		'spec' =
		    %% Line 145
		    [{{'chr',1},[{'type',145,'fun',[{'type',145,'product',[{'type',145,'integer',[]}]}|[{'type',145,'char',[]}]]}]}]]
'isControl'/1 =
    %% Line 48
    fun (_0) ->
	case _0 of
	  <127> when 'true' ->
	      'true'
	  %% Line 49
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(0, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 31)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 50
	      'true'
	  %% Line 51
	  <_4> when 'true' ->
	      'false'
	end
'isSpace'/1 =
    %% Line 60
    fun (_0) ->
	case _0 of
	  <32> when 'true' ->
	      'true'
	  %% Line 61
	  <9> when 'true' ->
	      'true'
	  %% Line 62
	  <10> when 'true' ->
	      'true'
	  %% Line 63
	  <11> when 'true' ->
	      'true'
	  %% Line 64
	  <12> when 'true' ->
	      'true'
	  %% Line 65
	  <13> when 'true' ->
	      'true'
	  %% Line 66
	  <_2> when 'true' ->
	      'false'
	end
'isLower'/1 =
    %% Line 69
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(97, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 122)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 70
	      'true'
	  %% Line 71
	  <_4> when 'true' ->
	      'false'
	end
'isUpper'/1 =
    %% Line 74
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(65, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 90)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 75
	      'true'
	  %% Line 76
	  <_4> when 'true' ->
	      'false'
	end
'isAlpha'/1 =
    %% Line 79
    fun (_0) ->
	%% Line 80
	( case apply 'isLower'/1
		   (_0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  'true'
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'isUpper'/1
		      (_0)
	      -| ['compiler_generated'] )
	    ( <_1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'isAlphaNum'/1 =
    %% Line 83
    fun (_0) ->
	%% Line 84
	( case apply 'isAlpha'/1
		   (_0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  'true'
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'isDigit'/1
		      (_0)
	      -| ['compiler_generated'] )
	    ( <_1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'isPrint'/1 =
    %% Line 87
    fun (_0) ->
	let <_1> =
	    apply 'isControl'/1
		(_0)
	in  call 'erlang':'not'
		(_1)
'isDigit'/1 =
    %% Line 90
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(48, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 57)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 91
	      'true'
	  %% Line 92
	  <_4> when 'true' ->
	      'false'
	end
'isOctDigit'/1 =
    %% Line 95
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(48, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 55)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 96
	      'true'
	  %% Line 97
	  <_4> when 'true' ->
	      'false'
	end
'isHexDigit'/1 =
    %% Line 100
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(97, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 102)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 101
	      'true'
	  %% Line 102
	  <C>
	      when let <_3> =
		    call 'erlang':'=<'
			(65, _0)
		in  let <_4> =
			call 'erlang':'=<'
			    (_0, 70)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      %% Line 103
	      'true'
	  %% Line 104
	  <C> when 'true' ->
	      apply 'isDigit'/1
		  (C)
	end
'isAscii'/1 =
    %% Line 107
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(0, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 127)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 108
	      'true'
	  %% Line 109
	  <_4> when 'true' ->
	      'false'
	end
'toUpper'/1 =
    %% Line 112
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(97, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 122)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_3> =
		  call %% Line 113
		       'erlang':%% Line 113
				'-'
		      (%% Line 113
		       C, %% Line 113
			  97)
	      in  %% Line 113
		  call 'erlang':'+'
		      (_3, 65)
	  %% Line 114
	  <C> when 'true' ->
	      C
	end
'toLower'/1 =
    %% Line 117
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(65, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 90)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      let <_3> =
		  call %% Line 118
		       'erlang':%% Line 118
				'-'
		      (%% Line 118
		       C, %% Line 118
			  65)
	      in  %% Line 118
		  call 'erlang':'+'
		      (_3, 97)
	  %% Line 119
	  <C> when 'true' ->
	      C
	end
'digitToInt'/1 =
    %% Line 122
    fun (_0) ->
	case _0 of
	  <C>
	      when let <_1> =
		    call 'erlang':'=<'
			(48, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 57)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 123
	      call 'erlang':'-'
		  (C, 48)
	  %% Line 124
	  <C>
	      when let <_3> =
		    call 'erlang':'=<'
			(97, _0)
		in  let <_4> =
			call 'erlang':'=<'
			    (_0, 102)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      let <_5> =
		  call %% Line 125
		       'erlang':%% Line 125
				'-'
		      (%% Line 125
		       C, %% Line 125
			  97)
	      in  %% Line 125
		  call 'erlang':'+'
		      (_5, 10)
	  %% Line 126
	  <C>
	      when let <_6> =
		    call 'erlang':'=<'
			(65, _0)
		in  let <_7> =
			call 'erlang':'=<'
			    (_0, 70)
		    in  call 'erlang':'and'
			    (_6, _7) ->
	      let <_8> =
		  call %% Line 127
		       'erlang':%% Line 127
				'-'
		      (%% Line 127
		       C, %% Line 127
			  65)
	      in  %% Line 127
		  call 'erlang':'+'
		      (_8, 10)
	  %% Line 128
	  <_10> when 'true' ->
	      call 'erlang':'error'
		  ([78|[111|[116|[32|[97|[32|[100|[105|[103|[105|[116|[32|[99|[104|[97|[114]]]]]]]]]]]]]]]])
	end
'intToDigit'/1 =
    %% Line 131
    fun (_0) ->
	case _0 of
	  <I>
	      when let <_1> =
		    call 'erlang':'=<'
			(0, _0)
		in  let <_2> =
			call 'erlang':'=<'
			    (_0, 9)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 132
	      call 'erlang':'+'
		  (I, 48)
	  %% Line 133
	  <I>
	      when let <_3> =
		    call 'erlang':'=<'
			(10, _0)
		in  let <_4> =
			call 'erlang':'=<'
			    (_0, 15)
		    in  call 'erlang':'and'
			    (_3, _4) ->
	      let <_5> =
		  call %% Line 134
		       'erlang':%% Line 134
				'-'
		      (%% Line 134
		       I, %% Line 134
			  10)
	      in  %% Line 134
		  call 'erlang':'+'
		      (_5, 97)
	  %% Line 135
	  <_7> when 'true' ->
	      call 'erlang':'error'
		  ([78|[111|[116|[32|[105|[110|[32|[114|[97|[110|[103|[101|[32|[48|[46|[46|[49|[53]]]]]]]]]]]]]]]]]])
	end
'toTitle'/1 =
    %% Line 140
    fun (_0) ->
	apply 'toUpper'/1
	    (_0)
'ord'/1 =
    %% Line 143
    fun (_0) ->
	_0
'chr'/1 =
    %% Line 146
    fun (_0) ->
	_0
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('Char')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('Char', _0)
end