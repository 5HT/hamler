module 'List' ['append'/2,
	       'cons'/2,
	       'drop'/2,
	       'head'/1,
	       'init'/1,
	       'module_info'/0,
	       'module_info'/1,
	       'slice'/3,
	       'tail'/1,
	       'take'/2,
	       'uncons'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[76|[105|[115|[116|[46|[101|[114|[108]]]]]]]],1}],
		%% Line 29
		'spec' =
		    %% Line 29
		    [{{'append',2},[{'type',29,'fun',[{'type',29,'product',[{'type',29,'list',[]}|[{'type',29,'list',[]}]]}|[{'type',29,'list',[]}]]}]}],
		%% Line 32
		'spec' =
		    %% Line 32
		    [{{'cons',2},[{'type',32,'fun',[{'type',32,'product',[{'type',32,'any',[]}|[{'type',32,'list',[]}]]}|[{'type',32,'list',[]}]]}]}],
		%% Line 35
		'spec' =
		    %% Line 35
		    [{{'head',1},[{'type',35,'fun',[{'type',35,'product',[{'type',35,'list',[]}]}|[{'type',35,'any',[]}]]}]}],
		%% Line 38
		'spec' =
		    %% Line 38
		    [{{'init',1},[{'type',38,'fun',[{'type',38,'product',[{'type',38,'list',[]}]}|[{'type',38,'list',[]}]]}]}],
		%% Line 41
		'spec' =
		    %% Line 41
		    [{{'tail',1},[{'type',41,'fun',[{'type',41,'product',[{'type',41,'list',[]}]}|[{'type',41,'list',[]}]]}]}],
		%% Line 44
		'spec' =
		    %% Line 44
		    [{{'take',2},[{'type',44,'fun',[{'type',44,'product',[{'type',44,'pos_integer',[]}|[{'type',44,'list',[]}]]}|[{'type',44,'list',[]}]]}]}],
		%% Line 47
		'spec' =
		    %% Line 47
		    [{{'drop',2},[{'type',47,'fun',[{'type',47,'product',[{'type',47,'pos_integer',[]}|[{'type',47,'list',[]}]]}|[{'type',47,'list',[]}]]}]}],
		%% Line 50
		'spec' =
		    %% Line 50
		    [{{'slice',3},[{'type',50,'fun',[{'type',50,'product',[{'type',50,'pos_integer',[]}|[{'type',50,'pos_integer',[]}|[{'type',50,'list',[]}]]]}|[{'type',50,'list',[]}]]}]}]]
'append'/2 =
    %% Line 30
    fun (_0,_1) ->
	call 'lists':'append'
	    (_0, _1)
'cons'/2 =
    %% Line 33
    fun (_0,_1) ->
	[_0|_1]
'head'/1 =
    %% Line 36
    fun (_0) ->
	case _0 of
	  <[H|_2]> when 'true' ->
	      H
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'head',1}}] )
	    -| ['compiler_generated'] )
	end
'init'/1 =
    %% Line 39
    fun (_0) ->
	let <_1> =
	    call 'erlang':'length'
		(_0)
	in  let <_2> =
		call 'erlang':'-'
		    (_1, 1)
	    in  call 'lists':'sublist'
		    (_0, _2)
'tail'/1 =
    %% Line 42
    fun (_0) ->
	case _0 of
	  <[_2|T]> when 'true' ->
	      T
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'tail',1}}] )
	    -| ['compiler_generated'] )
	end
'take'/2 =
    %% Line 45
    fun (_0,_1) ->
	call 'lists':'sublist'
	    (_1, _0)
'drop'/2 =
    %% Line 48
    fun (_0,_1) ->
	let <_3> =
	    call 'erlang':'+'
		(_0, 1)
	in  let <_2> =
		call 'erlang':'length'
		    (_1)
	    in  call 'lists':'sublist'
		    (_1, _3, _2)
'slice'/3 =
    %% Line 51
    fun (_0,_1,_2) ->
	let <_3> =
	    call %% Line 52
		 'erlang':%% Line 52
			  '-'
		(_1, _0)
	in  %% Line 52
	    call 'lists':'slice'
		(_0, _3, _2)
'uncons'/1 =
    %% Line 54
    fun (_0) ->
	case _0 of
	  <[]> when 'true' ->
	      {'Nothing'}
	  %% Line 55
	  <[H|T]> when 'true' ->
	      {'Just',{H,T}}
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'uncons',1}}] )
	    -| ['compiler_generated'] )
	end
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('List')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('List', _0)
end