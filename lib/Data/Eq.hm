-----------------------------------------------------------------------------
-- |
-- Module      :  Data.Eq
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The Eq Typeclass.
--
-----------------------------------------------------------------------------
module Data.Eq where

import Data.Base (Integer, Float)

infix 4 eq as ==

class Eq a where
  eq :: a -> a -> Boolean

instance Eq Boolean where
  eq = boolEq
instance Eq Char where
  eq = charEq
instance Eq Integer where
  eq = intEq
instance Eq Float where
  eq = floatEq
instance Eq Number where
  eq = numEq

foreign import boolEq  :: Boolean -> Boolean -> Boolean
foreign import charEq  :: Char -> Char -> Boolean
foreign import intEq   :: Integer -> Integer -> Boolean
foreign import floatEq :: Float -> Float -> Boolean
foreign import numEq   :: Number -> Number -> Boolean

notEq :: forall a. Eq a => a -> a -> Boolean
notEq x y = (x==y) == false

